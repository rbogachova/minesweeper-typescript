{"version":3,"sources":["redux/utilities.ts","redux/actions.ts","redux/rootReducer.ts","Cell.tsx","redux/selectors.ts","App.tsx","index.tsx"],"names":["typedAction","type","payload","boardDimension","OPEN_CELL","LABEL_CELL","SHOW_ALL_BOMBS","RESTART_GAME","CHANGE_GAME_LEVEL","mapDispatchToProps","openCell","rowIndex","columnIndex","labelCell","connect","state","board","isGameEnded","props","className","cell","isOpen","onClick","onContextMenu","e","preventDefault","bombCount","isBomb","isFlagged","isQuestioned","easyLevel","mediumLevel","hardLevel","setupBomb","freeCells","max","randomNumber","length","Math","floor","random","splice","createBoard","gameLevel","Error","defineBoardDimension","push","i","createState","checkCellIsValid","rowLength","columnLength","checkHasBomb","showAllBombs","countCells","cellChecker","map","row","reduce","acc","rowCellCount","calculateNotMinedCells","allCellCount","openNotMinedCellCount","bombCounter","rowIndexAdjustment","columnIndexAdjustment","calculateBombCount","copyBoard","column","calculateFlaggedCells","flaggedCells","selectBoard","selectNotMinedCells","createSelector","selectFlaggedCells","renderCell","uuidv4","renderRow","restartGame","changeGameLevel","notMinedCells","restart","name","id","onChange","currentTarget","value","selected","message","closable","store","createStore","action","newBoard","newState","currentCell","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a11e66b1.chunk.js","sourcesContent":["export function typedAction<T extends string>(type: T): { type: T };\r\n\r\nexport function typedAction<T extends string, P extends any>(type: T, payload: P): { type: T; payload: P };\r\n\r\nexport function typedAction(type: string, payload?: any) {\r\n    return { type, payload };\r\n}\r\n","import {typedAction} from \"./utilities\";\r\n\r\nexport const OPEN_CELL = 'OPEN_CELL';\r\nexport const LABEL_CELL = 'LABEL_CELL';\r\nexport const SHOW_ALL_BOMBS = 'SHOW_ALL_BOMBS';\r\nexport const RESTART_GAME = 'RESTART_GAME';\r\nexport const CHANGE_GAME_LEVEL = 'CHANGE_GAME_LEVEL';\r\n\r\nexport const createOpenCell = (rowIndex: number, columnIndex: number) => {\r\n    return typedAction(OPEN_CELL, {rowIndex, columnIndex});\r\n};\r\n\r\nexport const createLabelCell = (rowIndex: number, columnIndex: number) => {\r\n    return typedAction(LABEL_CELL, {rowIndex, columnIndex});\r\n};\r\n\r\nexport const createShowAllBombs = () => {\r\n    return typedAction(SHOW_ALL_BOMBS);\r\n};\r\n\r\nexport const createRestartGame = (gameLevel: string) => {\r\n    return typedAction(RESTART_GAME, {gameLevel});\r\n};\r\n\r\nexport const createChangeGameLevel = (gameLevel: string) => {\r\n    return typedAction(CHANGE_GAME_LEVEL, {gameLevel});\r\n};\r\n","import {CHANGE_GAME_LEVEL, LABEL_CELL, OPEN_CELL, RESTART_GAME, SHOW_ALL_BOMBS} from \"./actions\";\r\nimport {Action, ICell, IState} from \"./types\";\r\n\r\nlet boardDimension: number;\r\nexport const easyLevel = 'easy';\r\nexport const mediumLevel = 'medium';\r\nexport const hardLevel = 'hard';\r\n\r\nconst generateRandomNumber = (max: number): number =>\r\n    Math.floor(Math.random() * max);\r\n\r\nfunction setupBomb(freeCells: ICell[]): void {\r\n    const randomNumber = generateRandomNumber(freeCells.length - 1);\r\n    freeCells[randomNumber].isBomb = true;\r\n    freeCells.splice(randomNumber, 1);\r\n}\r\n\r\nfunction defineBoardDimension(gameLevel: string): number {\r\n    switch (gameLevel) {\r\n        case easyLevel:\r\n            return boardDimension = 4;\r\n        case mediumLevel:\r\n            return boardDimension = 6;\r\n        case hardLevel:\r\n            return boardDimension = 10;\r\n    }\r\n    throw new Error('Unexpected gameLevel value.');\r\n}\r\n\r\nfunction createBoard(gameLevel: string): ICell[][] {\r\n    boardDimension = defineBoardDimension(gameLevel);\r\n\r\n    const board: ICell[][] = [];\r\n    const freeCells: ICell[] = [];\r\n\r\n    for (let rowIndex = 0; rowIndex <= boardDimension - 1; rowIndex++) {\r\n        board[rowIndex] = [];\r\n        for (let columnIndex = 0; columnIndex <= boardDimension - 1; columnIndex++) {\r\n            const cell: ICell = {\r\n                isBomb: false,\r\n                isOpen: false,\r\n                bombCount: null,\r\n                isFlagged: false,\r\n                isQuestioned: false,\r\n                rowIndex,\r\n                columnIndex\r\n            };\r\n\r\n            board[rowIndex][columnIndex] = cell;\r\n            freeCells.push(cell);\r\n        }\r\n    }\r\n    for (let i = 1; i <= boardDimension; i++)\r\n        setupBomb(freeCells);\r\n\r\n    return board;\r\n}\r\n\r\nconst createState = (gameLevel: string): IState => ({\r\n    board: createBoard(gameLevel),\r\n    isGameEnded: false,\r\n    gameLevel\r\n});\r\n\r\nfunction checkCellIsValid(board: ICell[][], rowIndex: number, columnIndex: number): boolean {\r\n    const rowLength = board.length;\r\n    const columnLength = board[0].length;\r\n    return rowIndex >= 0 &&\r\n        rowIndex < rowLength &&\r\n        columnIndex >= 0 &&\r\n        columnIndex < columnLength;\r\n}\r\n\r\nfunction checkHasBomb(board: ICell[][], rowIndex: number, columnIndex: number): boolean {\r\n    return checkCellIsValid(board, rowIndex, columnIndex) &&\r\n        board[rowIndex][columnIndex].isBomb;\r\n}\r\n\r\nfunction calculateBombCount(board: ICell[][], rowIndex: number, columnIndex: number): number {\r\n    let bombCounter = 0;\r\n    for (let rowIndexAdjustment = -1; rowIndexAdjustment <= 1; rowIndexAdjustment++) {\r\n        for (let columnIndexAdjustment = -1; columnIndexAdjustment <= 1; columnIndexAdjustment++) {\r\n            if (rowIndexAdjustment === 0 && columnIndexAdjustment === 0)\r\n                continue;\r\n            if (checkHasBomb(board, rowIndex + rowIndexAdjustment, columnIndex + columnIndexAdjustment))\r\n                bombCounter++;\r\n        }\r\n    }\r\n    return bombCounter;\r\n}\r\n\r\nfunction showAllBombs(board: ICell[][]): void {\r\n    for (let rowIndex = 0; rowIndex < board.length; rowIndex++) {\r\n        for (let columnIndex = 0; columnIndex < board[rowIndex].length; columnIndex++) {\r\n            if (board[rowIndex][columnIndex].isBomb)\r\n                board[rowIndex][columnIndex].isOpen = true;\r\n        }\r\n    }\r\n}\r\n\r\nfunction countCells(board: ICell[][], cellChecker: (cell: ICell) => boolean): number {\r\n    return board\r\n        .map(row => row.reduce((acc, cell) => cellChecker(cell) ? acc + 1 : acc, 0))\r\n        .reduce((acc, rowCellCount) => acc + rowCellCount);\r\n}\r\n\r\nexport function calculateNotMinedCells(board: ICell[][]): number {\r\n    boardDimension = board.length;\r\n    const allCellCount = boardDimension * boardDimension;\r\n    const openNotMinedCellCount = countCells(board, cell => cell.isOpen && !cell.isBomb);\r\n\r\n    return allCellCount - boardDimension - openNotMinedCellCount;\r\n}\r\n\r\nfunction openCell(state: IState, rowIndex: number, columnIndex: number): void {\r\n    if (!checkCellIsValid(state.board, rowIndex, columnIndex))\r\n        return;\r\n\r\n    const cell = state.board[rowIndex][columnIndex];\r\n    if (cell.isOpen)\r\n        return;\r\n\r\n    cell.isOpen = true;\r\n    if (cell.isBomb) {\r\n        showAllBombs(state.board);\r\n        state.isGameEnded = true;\r\n        return;\r\n    }\r\n\r\n    if (calculateNotMinedCells(state.board) === 0) {\r\n        state.isGameEnded = true;\r\n        return;\r\n    }\r\n\r\n    cell.bombCount = calculateBombCount(state.board, rowIndex, columnIndex);\r\n    if (cell.bombCount !== 0)\r\n        return;\r\n    for (let rowIndexAdjustment = -1; rowIndexAdjustment <= 1; rowIndexAdjustment++) {\r\n        for (let columnIndexAdjustment = -1; columnIndexAdjustment <= 1; columnIndexAdjustment++) {\r\n            if (rowIndexAdjustment === 0 && columnIndexAdjustment === 0)\r\n                continue;\r\n            openCell(state, rowIndex + rowIndexAdjustment, columnIndex + columnIndexAdjustment);\r\n        }\r\n    }\r\n}\r\n\r\nconst copyBoard = (board: ICell[][]): ICell[][] =>\r\n    board.map(row => row.map(column => column));\r\n\r\nexport const calculateFlaggedCells = (board: ICell[][]): number =>\r\n    countCells(board, cell => cell.isFlagged);\r\n\r\nfunction labelCell(cell: ICell, board: ICell[][]): void {\r\n    const flaggedCells = calculateFlaggedCells(board);\r\n\r\n    if (cell.isFlagged) {\r\n        cell.isFlagged = false;\r\n        cell.isQuestioned = true;\r\n    } else if (cell.isQuestioned) {\r\n        cell.isQuestioned = false;\r\n    } else if (flaggedCells < boardDimension) {\r\n        cell.isFlagged = true;\r\n    } else if (flaggedCells === boardDimension) {\r\n        cell.isQuestioned = true;\r\n    }\r\n}\r\n\r\nexport const rootReducer = (state: IState = createState(easyLevel), action: Action): IState => {\r\n    switch (action.type) {\r\n        case OPEN_CELL: {\r\n            const newBoard = copyBoard(state.board);\r\n            const newState = {...state, board: newBoard};\r\n            openCell(newState, action.payload.rowIndex, action.payload.columnIndex);\r\n\r\n            return newState;\r\n        }\r\n\r\n        case LABEL_CELL: {\r\n            const newBoard = copyBoard(state.board);\r\n            const currentCell = newBoard[action.payload.rowIndex][action.payload.columnIndex];\r\n            labelCell(currentCell, newBoard);\r\n\r\n            return {...state, board: newBoard};\r\n        }\r\n\r\n        case RESTART_GAME: {\r\n            return createState(action.payload.gameLevel);\r\n        }\r\n\r\n        case SHOW_ALL_BOMBS: {\r\n            const newBoard = copyBoard(state.board);\r\n            showAllBombs(newBoard);\r\n\r\n            return {...state, board: newBoard};\r\n        }\r\n\r\n        case CHANGE_GAME_LEVEL: {\r\n            return createState(action.payload.gameLevel);\r\n        }\r\n    }\r\n    return state;\r\n};\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {createOpenCell, createLabelCell} from './redux/actions';\r\nimport './cell.css';\r\nimport 'antd/dist/antd.css';\r\nimport {ICell, IState} from \"./redux/types\";\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps & { cell: ICell };\r\n\r\nconst Cell: React.FC<Props> = (props) => {\r\n    const openCell = () => {\r\n        if (props.cell.isOpen || props.isGameEnded)\r\n            return;\r\n\r\n        props.openCell(props.cell.rowIndex, props.cell.columnIndex);\r\n    };\r\n\r\n    const labelCell = (e: React.MouseEvent) => {\r\n        e.preventDefault();\r\n        props.labelCell(props.cell.rowIndex, props.cell.columnIndex);\r\n    };\r\n\r\n    const renderCellContent = () => {\r\n        if (!props.cell.isOpen) {\r\n            if (props.cell.isFlagged)\r\n                return '☠️';\r\n            else if (props.cell.isQuestioned)\r\n                return '?';\r\n            else\r\n                return null;\r\n        }\r\n\r\n        if (props.cell.bombCount === 0)\r\n            return null;\r\n\r\n        return props.cell.isBomb\r\n            ? '💣' // TODO: change.\r\n            : props.cell.bombCount;\r\n    };\r\n\r\n    const getCellClass = () =>\r\n        props.cell.isOpen ? \"openCell\" : \"initialCell\";\r\n\r\n    return (\r\n        <span className={getCellClass()}\r\n              onClick={openCell} onContextMenu={labelCell}>\r\n            {renderCellContent()}\r\n        </span>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: IState) => ({\r\n    board: state.board,\r\n    isGameEnded: state.isGameEnded\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    openCell: createOpenCell,\r\n    labelCell: createLabelCell\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cell);\r\n","import {createSelector} from 'reselect';\r\nimport {calculateNotMinedCells, calculateFlaggedCells} from './rootReducer';\r\nimport {IState} from \"./types\";\r\n\r\nconst selectBoard = (state: IState) => state.board;\r\n\r\nexport const selectNotMinedCells = createSelector(\r\n    [selectBoard],\r\n    calculateNotMinedCells);\r\n\r\nexport const selectFlaggedCells = createSelector(\r\n    [selectBoard],\r\n    calculateFlaggedCells);\r\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport Cell from './Cell';\nimport {v4 as uuidv4} from 'uuid';\nimport {createRestartGame, createShowAllBombs, createChangeGameLevel} from './redux/actions';\nimport './app.css';\nimport {Alert} from 'antd';\nimport {selectFlaggedCells, selectNotMinedCells} from './redux/selectors';\nimport {easyLevel, hardLevel, mediumLevel} from './redux/rootReducer';\nimport {ICell, IState} from \"./redux/types\";\n\nconst renderCell = (cell: ICell): JSX.Element =>\n    <Cell key={uuidv4()} cell={cell}/>;\n\nconst renderRow = (row: ICell[]): JSX.Element =>\n    <div key={uuidv4()}>{row.map(renderCell)}</div>;\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof mapDispatchToProps;\n\nconst App: React.FC<Props> = (props) => {\n    const changeGameLevel = (e: React.FormEvent<HTMLSelectElement>) =>\n        props.changeGameLevel(e.currentTarget.value);\n\n    const restart = () =>\n        props.restartGame(props.gameLevel);\n\n    const showAllBombs = () =>\n        props.showAllBombs();\n\n    const showGameOverMessage = (): JSX.Element =>\n        <Alert message=\"GAME OVER\"\n               type=\"error\"\n               closable\n               onClick={restart}/>;\n\n    const showCongratulationsMessage = (): JSX.Element =>\n        <Alert message=\"CONGRATULATIONS! YOU WON!\"\n               type=\"success\"\n               closable\n               onClick={restart}/>;\n\n    return (\n        <div className=\"app\">\n            <table className=\"center\">\n                <tbody>\n                <tr>\n                    <td>\n                        <h1>Minesweeper</h1>\n                    </td>\n                    <td>\n                        <select name=\"levels\" id=\"levels\" onChange={changeGameLevel}>\n                            <option value={easyLevel} selected>Easy</option>\n                            <option value={mediumLevel}>Medium</option>\n                            <option value={hardLevel}>Hard</option>\n                        </select>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n            <p>Not Mined Cells: {props.notMinedCells}</p>\n            <p> ☠️ ️ Bombs: {props.board.length - props.flaggedCells}</p>\n            <button onClick={restart}>Restart</button>\n            <button onClick={showAllBombs}>Show All Bombs</button>\n            {props.board.map(renderRow)}\n            {props.isGameEnded && props.notMinedCells > 0 && showGameOverMessage()}\n            {props.notMinedCells === 0 && showCongratulationsMessage()}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: IState) => ({\n    board: state.board,\n    isGameEnded: state.isGameEnded,\n    notMinedCells: selectNotMinedCells(state),\n    flaggedCells: selectFlaggedCells(state),\n    gameLevel: state.gameLevel\n});\n\nconst mapDispatchToProps = {\n    restartGame: createRestartGame,\n    showAllBombs: createShowAllBombs,\n    changeGameLevel: createChangeGameLevel\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport {rootReducer} from \"./redux/rootReducer\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}